generate pkg-config file for node and install it during make install

Upstream-Status: Pending

Signed-off-by: Manjukumar Matha <manjukumar.harthikote-matha@xilinx.com>
---
--- a/configure
+++ b/configure
@@ -113,6 +113,11 @@
     dest='gdb',
     help='add gdb support')
 
+parser.add_option('--libdir',
+    action='store',
+    dest='libdir',
+    help='select the libdir to install pkgconfig file')
+
 parser.add_option('--no-ifaddrs',
     action='store_true',
     dest='no_ifaddrs',
@@ -1410,9 +1415,16 @@
   'PYTHON': sys.executable,
 }
 
+# Save these before they're modified, for generating a pkg-config.
+pkgconfig = output
+pkgconfig['config'] = config
+
 if options.prefix:
   config['PREFIX'] = options.prefix
 
+if options.libdir:
+  config['LIBDIR'] = options.libdir
+
 config = '\n'.join(map('='.join, config.iteritems())) + '\n'
 
 write('config.mk', do_not_edit + config)
@@ -1436,4 +1448,88 @@
 if warn.warned:
   warn('warnings were emitted in the configure phase')
 
+
+
+#
+# Generate pkg-config for node.
+#
+def pkgcfg_prefix(prefix, k):
+  if prefix:
+    return prefix + '_' + k
+  else:
+    return k
+
+def pkgcfg_list(f, prefix, l):
+  f.write(prefix + '=')
+  sep=''
+  for e in l:
+    if type(e) == type({}) or type(e) == type([]):
+      print('Cannot generate pkgconfig output for complex ' + prefix)
+      sys.exit(1)
+    f.write(sep + str(e))
+    sep = ', '
+  f.write('\n')
+
+def pkgcfg_simple(f, prefix, v):
+  f.write(prefix + '=' + str(v) + '\n')
+
+def pkgcfg_dict(f, prefix, d):
+  for k in d:
+    pkgcfg_object(f, pkgcfg_prefix(prefix, k), d[k])
+
+def pkgcfg_object(f, prefix, o):
+  if type(o) == type({}):
+    pkgcfg_dict(f, prefix, o)
+  elif type(o) == type([]):
+    pkgcfg_list(f, prefix, o)
+  else:
+    pkgcfg_simple(f, prefix, o)
+
+def pkgcfg_stdvars(f, o):
+  prefix = o['variables']['node_prefix']
+  arch = o['variables']['target_arch']
+  if options.libdir:
+    libdir = options.libdir
+  else:
+    libdir = prefix + '/lib64' if arch.find('64') else prefix + '/lib'
+  f.write('prefix=' + prefix + '\n')
+  f.write('libdir=' + libdir + '\n')
+  f.write('includedir=' + prefix + '/include\n')
+
+def pkgcfg_stdflags(f, o):
+  cmd = '/usr/bin/env python ' + os.getcwd() + '/tools/getnodeversion.py'
+  version = os.popen(cmd).read().strip()
+  defs = o['target_defaults']
+  cflgs = ''
+  sep = ''
+  for e in o['target_defaults']['cflags'] + o['target_defaults']['defines']:
+    cflgs = cflgs + sep + e
+    sep = ' '
+  cflgs = cflgs + sep + '-I${includedir} '
+  sep = ''
+  for e in defs['include_dirs']:
+    cflgs = cflgs + sep + '-I' + e
+    sep = ' '
+  libs = ''
+  sep = ''
+  for e in defs['libraries']:
+    libs = libs + sep + '-l' + e if e[0] != '-' else libs + sep + e
+    sep = ' '
+
+  f.write('Name: node\n')
+  f.write('Description: NodeJS, JavaScript runtime for native apps.\n')
+  f.write('Version: ' + version + '\n')
+  f.write('Cflags: ' + cflgs + '\n')
+  f.write('Libs: -L${libdir} ' + libs + '\n')
+
+def configure_pkgconfig(path, o):
+  f = open(path, 'w')
+  pkgcfg_stdvars(f, o)
+  f.write('\n')
+  pkgcfg_object(f, '', o)
+  f.write('\n')
+  pkgcfg_stdflags(f, o)
+
+configure_pkgconfig('node.pc', pkgconfig)
+
 run_gyp(gyp_args)
